@ vi: ft=armv5
.thumb_func
.global main
main:
    BL stdio_init_all

    @ Test countChar
    LDR R0, =count_test_0
    LDRB R1, [R0]   @ char to search for
    ADD R0, #1
    LDRB R4, [R0]   @ expected count
    ADD R0, #1      @ now points to search string
    BL countChar
    CMP R0, R4
    BNE fail

    @ Run calcFloor, print out result
    LDR R0, =input
    BL calcAndPrintFloor
end:
    b end

fail:
    b fail

@ Calculate the floor and print the input and result
calcAndPrintFloor:
    PUSH {R4, LR}
    MOV R4, R0  @ temp store R0
    BL printf
    MOV R0, R4  @ restore R0
    BL calcFloor
    MOV R4, R1  @ basement result in R4
    MOV R1, R0  @ result in R1
    LDR R0, =outstr
    BL printf
    LDR R0, =bm_outstr
    MOV R1, R4
    BL printf
    POP {R4, PC}

@ Calculate the floor based in ( meaning go up, and ) meaning go down
@ Input:    R0 - the address of the string
@ Output:   R0 - the resultant floor number
@ Clobbered regs:
@   R4 - storage of string address
@   R5 - running total
@ Notes:
@   * Not the most efficient method, as it requires two traverses
@   * A more efficient method would help with the second part
calcFloorOld:
    PUSH {R4, R5, LR}
    MOV R4, R0
    MOV R1, #'('
    BL countChar
    MOV R5, R0
    MOV R0, R4
    MOV R1, #')'
    BL countChar
    SUB R5, R0
    MOV R0, R5
    POP {R4, R5, PC}

@ More efficient method
@ Input:    R0 - the address of the string
@ Output:   R0 - the resultant floor number
@           R1 - the first position to take us to floor -1
@ Clobbered regs:   R4 - pos found for floor -1
calcFloor:
    PUSH {R4}
    MOV R1, #0  @ running total
    MOV R3, #0  @ current pos
    MOV R4, #0  @ 1-based, so 0 indicates not found yet
calcLoop:
    LDRB R2, [R0, R3]
    CMP R2, #0
    BEQ calcDone
    CMP R2, #'('
    BNE notUp
    ADD R1, #1
    B calcNext
notUp:
    SUB R1, #1
calcNext:
    ADD R3, #1
    CMP R4, #0      @ don't check if floor -1 if already found
    BNE calcLoop
    CMP R1, #0     @ check if floor -1
    BGE calcLoop
    @ we've found floor -1
    MOV R4, R3
    B calcLoop
calcDone:
    MOV R0, R1
    MOV R1, R4
    POP {R4}
    BX LR

@ Count the number of instances of a particular character in a string
@ Input:    R0 - the address of the string
@           R1 - the character to search for
@ Output:   R0 - the count of characters
@ Clobbered regs:   R2, R3, no need to save
countChar:
    MOV R3, #0  @ running count
countLoop:
    LDRB R2, [R0]   @ current char
    CMP R2, #0
    BEQ countDone
    CMP R2, R1
    BNE noMatch
    ADD R3, #1
noMatch:
    ADD R0, #1
    B countLoop
countDone:
    MOV R0, R3
    BX LR

.align 4
.data
count_test_0:
                .ascii "("
                .byte 3
                .asciz "(()()"

outstr:         .asciz " %d\n"
bm_outstr:      .asciz "Found basement at %d\n"

game_test_0:
                .byte 0
                .asciz "(())"
game_test_1:
                .byte 0
                .asciz "()()"
game_test_2:
                .byte 3
                .asciz "((("
game_test_3:
input_test_3_2:     .asciz "(()(()("
input_test_3_3:     .asciz "))((((("
input_test_m1_1:    .asciz "())"
input_test_m1_2:    .asciz "))("
input_test_m3_1:    .asciz ")))"
input_test_m3_2:    .asciz ")())())"

input:  .asciz "()(((()))(()()()((((()(((())(()(()((((((()(()(((())))((()(((()))((())(()((()()()()(((())(((((((())))()()(()(()(())(((((()()()((())(((((()()))))()(())(((())(())((((((())())))(()())))()))))()())()())((()()((()()()()(()((((((((()()())((()()(((((()(((())((())(()))()((((()((((((((())()((()())(())((()))())((((()())(((((((((((()()(((((()(()))())(((()(()))())((()(()())())())(()(((())(())())()()(()(()((()))((()))))((((()(((()))))((((()(()(()())())()(((()((((())((((()(((()()(())()()()())((()((((((()((()()))()((()))()(()()((())))(((()(((()))((()((()(()))(((()()(()(()()()))))()()(((()(((())())))))((()(((())()(()(())((()())))((((())))(()(()(()())()((()())))(((()((()(())()()((()((())(()()((())(())()))()))((()(())()))())(((((((()(()()(()(())())))))))(()((((((())((((())((())())(()()))))()(())(()())()())((())(()))))(()))(()((()))()(()((((((()()()()((((((((()(()(())((()()(()()))(())()())()((())))()))()())(((()))(())()(())()))()((()((()(()()())(())()()()((())())))((()()(()()((()(())()()())(((()(()()))))(())))(()(()())()))()()))))))()))))((((((())))())))(()(())())(()())))))(()))()))))))()((()))))()))))(()(()((()())())(()()))))(((())()))())())())(((()(()()))(())()(())(())((((((()()))))((()(()))))))(()))())(((()()(()))()())()()()())))))))))))))(())(()))(()))((()(())(()())(())())(()())(())()()(()())))()()()))(())())()))())())(())((())))))))(())))(())))))()))))((())(()(((()))))(()))()((()(())))(()())(((((()))()())()()))))()))))()))())(()(()()()))()))))))((()))))))))))()((()))((()(())((())()()(()()))()(()))))()()(()))()))(((())))(())()((())(())(()())()())())))))))())))()((())))()))(()))()()))(((((((()))())(()()))(()()(()))()(()((()())()))))))(((()()()())))(())()))()())(()()))()()))))))))(())))()))()()))))))()))()())))()(())(())))))()(())()()(()()))))())((()))))()))))(()(((((()))))))))())))())()(())()()))))(())))())()()())()()())()(()))))()))()))))))))())))((()))()))()))())))()())()()())))())))(()((())()((()))())))))())()(())((())))))))))))())()())(())())())(()))(()))()))())(()(())())()())()()(()))))(()(())))))))(())))())(())))))))())()()(())())())))(())))))()))()(()())()(()))())())))))()()(()))()))))())))))))))()))))()))))))())()())()()))))()())))())))))))))))()()))))()()(((()))()()(())()))))((()))))(()))(())())))(())()))))))(()))()))))(())())))))()))(()())))))))))))))())))))))))()((()())(()())))))))((()))))(())(())))()(()())())))())())(()()()())))()))))))())))))())()()())))))))))))()()(()))))()())()))((()())(()))))()(()))))))))))()())())(((())(()))))())()))()))()))))))()))))))(()))))()))))()(())))(())))(()))())()()(()()))()))(()()))))))))()))(()))())(()()(()(()())()()))()))))))))(())))))((()()(()))())())))))()))())(()())()()))())))()(()()()()))((())())))())()(()()))()))))))))(()))(())))()))))(()(()())(()))))()())())()))()()))())))))))))))())()))))))()))))))))())))))()))))())(()())))(())()))())())))))()()(()()())(()())))()()))(((()))(()()()))))()))))()))))((())))()((((((()()))))))())))))))))))(((()))))))))))))(())())))))())(()))))))(()))((()))())))()(()((()))()))()))))))))))())()))()(()()))))())))())(())()(()))()))())(()))()))))(()()))()()(())))))()))(())(()(()()))(()()())))))(((()))))))()))))))))))))(())(()))))()())())()()((()()))())))))(()))))())))))))()()()))))))))())))()(((()()))(())))))(((())())))))((()))()(()))(()))))(()())))(()))())))))()))))(())(())))()((()))(())())))()()))()))))))))()))(()()()(()()()(()))())(())()())(((()))(())))))))))(((()())))()()))))))))()(())(()))()((((())(())(()())))()))(((())()()()))((()))(()))())())))())))(()))())()())())(()(())())()()()(())))())(())))(())))(())()))()))(()((()))))))))())(()))))))())(()()))()()))()(()(()())))()()(()((()((((((()))(())))()()()))())()))((()()(()))())((()(()(()))(()()))))()())))()))()())))))))()()((()())(())))()))(()))(())(()))())(()(())))()()))))))(((()(((()()))()(()(())())((()()))()))()))()))()(()()()(()))((()())()(())))()()))(((())()()())(())()((()()()()(()(())(()()))()(((((()())))((())))))(()()()))))(((()(())))()))((()((()(())()(()((())))((()())()(()))(((()())()()(()))(())(((()((()())()((())()())(((()()))((()((())(()))(()())(()()()))((()))(())(()((()()())((()))(())))(())(())(())))(()())))(((((()(()(((((()())((((()(()())(())(()()(((())((()(((()()(((()()((((((())))())(()((((((()(()))()))()()((()((()))))()(()()(()((()()))))))(((((()(((((())()()()(())())))))))()))((()()(())))(())(()()()())))))(()((((())))))))()()(((()(()(()(()(()())()()()(((((((((()()())()(()))((()()()()()(((((((()())()((())()))((((((()(()(()(()())(((()(((((((()(((())(((((((((())(())())()))((()(()))(((()()())(())(()(()()(((()(())()))())))(())((((((())(()()())()()(((()(((())(()(((())(((((((()(((((((((()))(())(()(()(()))))((()))()(())())())((()(()((()()))((()()((()(())(())(()((())(((())(((()()()((((((()()(())((((())()))))(())((()(()((())))(((((()(()()())())((())())))((())((()((()()((((((())(((()()(()())())(()(()))(()(()))())())()(((((((()(((()(())()()((())((()(()()((()(()()(((((((((((())((())((((((())((()((((()(()((((()(((((((())()((()))))())()((()((((()(()(((()((()())))(())())(((()(((())((((((()(((((((((()()(())))(()(((((()((((()())))((()((()((()(()()(((())((((((((((((()(((())(()(((((()))(()()(()()()()()()((())(((((((())(((((())))))())()(()()(()(()(((()()(((((())(()((()((()(((()()((()((((())()))()((((())(())))()())(((())(())(()()((()(((()()((((((((((()()(()())())(((((((((())((((()))()()((((())(()((((()(((())())(((((((((((()((((())))(())(()(((()(((()((())(((((()((()()(()(()()((((((()((((()((()(()((()(()((((((()))))()()(((((()((()(()(())()))(())(((((((()((((()())(()((()((()(()))())))(())((()))))(((((((()()()())(()))(()()((()())()((()((()()()(()(()()))(()())(())(((((()(((((((((((()((()(((()(((((((()()((((((()(((((()(()((()(((((())((((((()))((((())((()()((())(((())()(((((()()(((((()((()(()(((((((()(((((()((()((()((())(())((())(()))()()))(()()(()(()()(((((((()(((()(((())()(((((()((((((()())((((())()((()((()(()()())(()))((((()()((((((()((()(()(()((((()((()((())((((((()(()(())((((((()((((((((((()((())()))()(()(()(((((()()()))((())))()(()((((((((((((((()(((()((((()((())((()((()(((()()(()(((()((())(()()())))()(()(()(((((()()(()(()((((()(((((())()(()(()))(((((()()(((()()(())((((((((((((((())((())(((((((((((())()()()(())()(()(()(((((((((())(((()))(()()())(()((((()(())(((((()())(())((((((((())()((((()((((((())(()((()(())(((()((((()))(((((((((()()))((((()(())()()()(())(()((())((()()))()(((())(((((())((((((()()))(((((((((()((((((())))(((((((()((()(()(())))())(()(()))()(((((()())(()))()(()(())(((()))))())()())))(((((()))())()((()(()))))((()()()((((((()))()()((((((((())((()(()(((()(()((())((()())(()((((())(()(((()()()(()(()()))())())((((((((((())())((()))()((())(())(())))())()(()()(())))())(()))(((()(()()(((()(((())))()(((()(())()((((((())()))()))()((((((()(()(((((()())))()))))())()()(((()(((((())((()()(()((()((()(()(()(())))(()()()()((()(())(((()((()))((((()))())(())))())(()))()()()())()))(((()()())()((())))(())(()()()()(()())((()(()()((((())))((()((()(())((()(()((())()(()()(((()())()()())((()))((())(((()()(())))()()))(((()((())()(((((()())(())((())()())())((((((()(()(((((()))(()("

